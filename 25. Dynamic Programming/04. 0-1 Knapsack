class Solution {
  public:
    int f(int ind, int w, vector<int> &val, vector<int> &wt, vector<vector<int>> &dp){
        if(ind == -1){
            return 0;
        }
        
        if(dp[ind][w] != -1) return dp[ind][w];
        
        int notPick = 0 + f(ind-1, w, val, wt, dp);
        int pick = 0;
        if(wt[ind] <= w){
            pick = val[ind] + f(ind-1, w-wt[ind], val, wt, dp);
        }
        
        return dp[ind][w] = max(pick , notPick);
    }
    int knapsack(int W, vector<int> &val, vector<int> &wt) {
        // code here
        int n = val.size();
        vector<vector<int>> dp(n, vector<int> (W+1, -1));
        return f(n-1, W, val, wt, dp);
    }
};