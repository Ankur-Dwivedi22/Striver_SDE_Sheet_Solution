class Solution {
public:
    int f(int ind, int prev, vector<int> &nums, vector<vector<int>> &dp){
        if(ind == nums.size()){
            return 0;
        }

        if(dp[ind][prev+1] != -1) return dp[ind][prev+1];

        int notTake = 0 + f(ind+1, prev, nums,dp);
        int take = 0;
        if(prev == -1 || nums[ind] > nums[prev]){
            take = 1 + f(ind+1, ind, nums, dp);
        }

        return dp[ind][prev+1] = max(take, notTake);
    }   
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> dp(n, vector<int> (n+1, -1));
        return f(0, -1, nums, dp);
    }
};


//O(nlogn)

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<int> temp;
        temp.push_back(nums[0]);

        for(int i=1; i<n; i++){
            if(nums[i] > temp.back()){
                temp.push_back(nums[i]);
            }
            else{
                int ind = lower_bound(temp.begin(),temp.end(),nums[i]) - temp.begin();
                temp[ind] = nums[i];
            }
        }

        return (int)temp.size();
    }
};