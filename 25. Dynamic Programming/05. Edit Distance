class Solution {
public:
    int f(int ind1, int ind2, string &word1, string &word2, vector<vector<int>> &dp){
        if(ind1 < 0) return ind2+1;
        if(ind2 < 0) return ind1+1;

        if(dp[ind1][ind2] != -1){
            return dp[ind1][ind2];
        }

        int c1 = 1e9, c2 = 1e9, c3 = 1e9, c4 = 1e9;
        if(word1[ind1] == word2[ind2]){
            c1 = 0 + f(ind1-1, ind2-1, word1, word2, dp);
        }
        else{
            c2 = 1 + f(ind1, ind2-1, word1, word2, dp);
            c3 = 1 + f(ind1-1, ind2, word1, word2, dp);
            c4 = 1 + f(ind1-1,ind2-1, word1, word2, dp);
        }

        return dp[ind1][ind2] = min({c1, c2, c3, c4});
    }
    int minDistance(string word1, string word2) {
       int n1 = word1.size() , n2 = word2.size();
       vector<vector<int>> dp(n1, vector<int> (n2, -1));
       return f(n1-1, n2-1, word1, word2, dp); 
    }
};