class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int n = nums.size() , sum = 0;
        for(int i=0; i<n; i++){
            sum += nums[i];
        }
        if(sum % 2) return false;
        sum /= 2;
        vector<int> prev(sum+1, 0) , curr(sum+1, 0);

        // for(int i=0; i<n; i++){
        //     dp[i][0] = true;
        // }

        for(int s=0; s<=sum; s++){
            if(s == nums[0])
                prev[s] = true;
        }

        for(int ind=1; ind<n; ind++){
            curr[0] = true;
            for(int s=1; s<=sum; s++){
                bool notPick = prev[s];
                bool pick = false;
                if(nums[ind] <= s){
                    pick = prev[s-nums[ind]];
                }

                curr[s] = pick || notPick;
            }
            prev = curr;
        }
        return prev[sum];
    }
};