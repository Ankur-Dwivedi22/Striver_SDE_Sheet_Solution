class Solution {
public:
    int f(int i, int j, vector<vector<int>> &grid, vector<vector<int>> &dp){
        if(i == 0 && j == 0){
            return grid[i][j];
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int left = 1e9 , up = 1e9;
        if(j-1 >= 0){
            left = grid[i][j] + f(i,j-1,grid,dp);
        }
        if(i-1 >= 0){
            up = grid[i][j] + f(i-1,j,grid,dp);
        }
        return dp[i][j] = min(left,up);
    }
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size() , n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, -1));
        return f(m-1,n-1,grid,dp);
    }
};