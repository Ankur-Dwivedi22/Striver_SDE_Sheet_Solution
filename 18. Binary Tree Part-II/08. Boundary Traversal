/*
// Tree Node
class Node {
  public:
    int data;
    Node* left;
    Node* right;

    // Constructor to initialize a new node
    Node(int val) {
        data = val;
        left = NULL;
        right = NULL;
    }
};
*/

class Solution {
  public:
    void addLeftBoundary(Node* root, vector<int> &ans){
        Node* curr = root->left;
        while(curr){
            if(curr->left || curr->right){
                ans.push_back(curr->data);
            }
            
            if(curr->left){
                curr = curr->left;
            }
            else{
                curr = curr->right;
            }
        }
    }
    
    void addRightBoundary(Node* root, vector<int> &ans){
        Node* curr = root->right;
        vector<int> temp;
        while(curr){
            if(curr->right || curr->left){
                temp.push_back(curr->data);
            }
            if(curr->right){
                curr = curr->right;
            }
            else{
                curr = curr->left;
            }
        }
        
        for(int i=temp.size()-1; i>=0; i--){
            ans.push_back(temp[i]);
        }
    }
    
    void addLeaf(Node* node, vector<int> &ans){
        if(node == NULL) return;
        if(!node->left && !node->right){
            ans.push_back(node->data);
            return;
        }
        addLeaf(node->left, ans);
        addLeaf(node->right, ans);
    }
    
    vector<int> boundaryTraversal(Node *root) {
        // code here
        vector<int> ans;
        if(root == NULL){
            return ans;
        }
        
        if(!(root->left == NULL && root->right == NULL)) ans.push_back(root->data);
        
        addLeftBoundary(root,ans);
        addLeaf(root, ans);
        addRightBoundary(root, ans);
        
        return ans;
    }
};