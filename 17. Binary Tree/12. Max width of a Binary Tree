/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        long long ans = 0;
        if(!root){
            return ans;
        }
        queue<pair<TreeNode*, long long>> q;
        q.push({root, 0});
        while(!q.empty()){
            int sz = q.size();
            long long first = -1, last = -1, mn = q.front().second;;
            while(sz--){
                auto it = q.front();
                q.pop();
                TreeNode* node = it.first;
                long long ind = it.second -mn;
                if(first == -1) first = ind;
                last = ind;
                if(node->left){
                    q.push({node->left , 2*1ll*ind});
                }
                if(node->right){
                    q.push({node->right, 2*1ll*ind+1});
                }
            }
            ans = max(ans , last-first+1);
        }

        return (int)ans;
    }
};