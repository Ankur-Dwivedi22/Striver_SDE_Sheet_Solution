/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        if(!root) return {};
        stack<pair<TreeNode* ,int>> st;
        vector<int> preorder, inorder, postorder;

        st.push({root, 1});
        while(!st.empty()){
            auto it = st.top();
            st.pop();
            TreeNode* node = it.first;
            int order = it.second;
            if(order == 1){
                preorder.push_back(node->val);
                st.push({node , order+1});
                if(node->left){
                    st.push({node->left , 1});
                }
            }
            else if(order == 2){
                inorder.push_back(node->val);
                st.push({node, order+1});
                if(node->right){
                    st.push({node->right, 1});
                }
            }
            else{
                postorder.push_back(node->val);
            }
        }

        return inorder;
    }
};