class DSU{
  public:
    vector<int> parent , rank , size;
    
    DSU(int n){
        parent.resize(n+1);
        rank.resize(n+1, 0);
        size.resize(n+1, 1);
        
        for(int i=0; i<=n; i++){
            parent[i] = i;
        }
    }
    
    int find(int node){
        if(parent[node] == node){
            return node;
        }
        return parent[node] = find(parent[node]);
    }
    
    void unionByRank(int u, int v){
        int ulp_u = find(u);
        int ulp_v = find(v);
        
        if(ulp_u == ulp_v) return;
        
        if(rank[ulp_u] < rank[ulp_v]){
            parent[ulp_u] = ulp_v;
        }
        else if(rank[ulp_v] < rank[ulp_u]){
            parent[ulp_v] = ulp_u;
        }
        else{
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }
    
    void unionBySize(int u, int v){
        int ulp_u = find(u);
        int ulp_v = find(v);
        
        if(ulp_u == ulp_v) return;
        
        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else{
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};

class Solution {
  public:
    int spanningTree(int V, vector<vector<int>>& edges) {
        // code here
        vector<vector<int>> arr;
        for(auto edge : edges){
            int u = edge[0] , v = edge[1] , wt = edge[2];
            arr.push_back({wt,u,v});
        }
        
        sort(arr.begin(),arr.end());
        
        DSU ds(V);
        int sum = 0;
        for(auto it : arr){
            int w = it[0] , u = it[1] , v = it[2];
            if(ds.find(u) != ds.find(v)){
                sum += w;
                ds.unionByRank(u,v);
            }
        }
        
        return sum;
    }
};