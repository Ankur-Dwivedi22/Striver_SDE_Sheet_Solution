// User Function Template
class Solution {
  public:
    vector<int> dijkstra(int V, vector<vector<int>> &edges, int src) {
        // Code here
        vector<int> dist(V, INT_MAX);
        vector<vector<pair<int,int>>> adj(V);
        
        for(auto edge : edges){
            int u = edge[0] , v = edge[1] , wt = edge[2];
            adj[u].push_back({v,wt});
            adj[v].push_back({u,wt});
        }
        priority_queue<pair<int,int> , vector<pair<int,int>> , greater<>> pq;
        dist[src] = 0;
        pq.push({0, src});
        
        while(!pq.empty()){
            auto it = pq.top();
            pq.pop();
            
            int node = it.second;
            int d = it.first;
            
            for(auto neighbor : adj[node]){
                int adjNode = neighbor.first;
                int edWt = neighbor.second;
                
                if(d + edWt < dist[adjNode]){
                    dist[adjNode] = d + edWt;
                    pq.push({d+edWt, adjNode});
                }
            }
        }
        
        return dist;
    }
};