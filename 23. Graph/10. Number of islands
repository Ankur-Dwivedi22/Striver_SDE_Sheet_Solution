class Solution {
public:
    void bfs(int i, int j, vector<vector<char>> &grid, vector<vector<int>> &vis, int m, int n){
        queue<pair<int,int>> q;
        q.push({i,j});
        vis[i][j] = 1;

        vector<int> dr = {0,-1,0,+1};
        vector<int> dc = {-1,0,+1,0};

        while(!q.empty()){
            auto it = q.front();
            q.pop();

            int r = it.first , c = it.second;
            for(int i=0; i<4; i++){
                int nr = r + dr[i];
                int nc = c + dc[i];

                if(nr >= 0 && nr < m && nc >= 0 && nc < n && !vis[nr][nc] && grid[nr][nc] == '1'){
                    vis[nr][nc] = 1;
                    q.push({nr,nc});
                }
            }   
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> vis(m , vector<int>(n, 0));
        int ct = 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(!vis[i][j] && grid[i][j] == '1'){
                    bfs(i,j,grid,vis,m,n);
                    ct++;
                }
            }
        }

        return ct;
    }
};