class Solution {
  public:
    bool bfs(int node, vector<int> &vis, vector<vector<int>> &adj){
        queue<pair<int,int>> q;
        
        q.push({node, -1});
        vis[node] = 1;
        
        while(!q.empty()){
            auto it = q.front();
            q.pop();
            
            int curr = it.first;
            int par = it.second;
            
            for(int adjNode : adj[curr]){
                if(!vis[adjNode]){
                    q.push({adjNode,curr});
                    vis[adjNode] = 1;
                }
                else if(adjNode != par){
                    return true;
                }
            }
        }
        
        
        return false;
    }
    bool isCycle(int V, vector<vector<int>>& edges) {
        // Code here
        vector<int> vis(V, 0);
        vector<vector<int>> adj(V);
        
        for(auto edge : edges){
            int u = edge[0] , v = edge[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        
        for(int i=0; i<V; i++){
            if(!vis[i]){
                if(bfs(i , vis, adj))
                    return true;
            }
        }
        
        return false;
    }
};