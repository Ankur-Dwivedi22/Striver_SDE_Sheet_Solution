class Solution {
  public:
    bool dfs(int node, int parent, vector<vector<int>> &adj, vector<int> &vis){
        vis[node] = 1;
        
        for(auto adjNode: adj[node]){
            if(!vis[adjNode]){
                if(dfs(adjNode, node, adj, vis)) return true;
            }
            else if(adjNode != parent){
                return true;
            }
        }
        
        return false;
    }
    
    bool isCycle(int V, vector<vector<int>>& edges) {
        // Code here
        vector<int> vis(V, 0);
        vector<vector<int>> adj(V);
        
        for(auto edge : edges){
            int u = edge[0];
            int v = edge[1];
            
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        for(int i=0; i<V; i++){
            if(!vis[i]){
                if(dfs(i, -1, adj, vis)) return true;
            }
        }
        
        return false;
    }
};