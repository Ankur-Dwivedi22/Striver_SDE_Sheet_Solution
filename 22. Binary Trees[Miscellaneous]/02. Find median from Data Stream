class MedianFinder {
public:
    priority_queue<int> maxHp;
    priority_queue<int, vector<int>, greater<>> minHp;
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if(maxHp.empty()){
            maxHp.push(num);
            return;
        }
        if(num >= maxHp.top()){
            minHp.push(num);
        }
        else{
            maxHp.push(num);
        }

        if(minHp.size() > maxHp.size()){
            maxHp.push(minHp.top());
            minHp.pop();
        }

        if(maxHp.size() > minHp.size()+1){
            minHp.push(maxHp.top());
            maxHp.pop();
        }
    }
    
    double findMedian() {
        double ans = 0;
        if((minHp.size() + maxHp.size()) % 2 == 0){
            ans = (maxHp.top() + minHp.top()) / 2.0;
        }
        else{
            ans = (double)maxHp.top();
        }
        return ans;
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */